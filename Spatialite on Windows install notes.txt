1.	Download “mod_spatialite-4.3.0a-win-amd64.7z” from http://www.gaia-gis.it/gaia-sins/windows-bin-amd64/ .
2.	Unzip the file to C:/
3. 	Optional: rename to "C:/Spatialite"
For command line interface, double click “sqlite3.exe”, which is stored in C:/Spatialite

For use in python coding, you have to 

#########################
import sqlite3
import os

spltpth = 'C:/Spatialite'
os.environ['PATH'] = os.environ['PATH']+ ';' + spltpath

con = sqlite3.connect(":memory:") # Or substitute a path to a db on drive for ":memory:"
cur = con.cursor()

con.enable_load_extension(True)
con.execute("select load_extension('mod_spatialite')")
#con.load_extension('mod_spatialite') # This is another option instead of the previous line
########################

That same code would look like this if you were not using spatialite (just sqlite):

########################
import sqlite3
import os

con = sqlite3.connect(":memory:") # Or substitute a path to a db on drive for ":memory:"
cur = con.cursor()
########################

The use of some functions is limited by default because of security concerns.  Two of those are "importshp" and "exportshp".  The way to allow them to function is to set an environemnt variable that says so.  For Windows 10, I had to create an environment variable by hand through control panel > system > advanced settings > environment variables (or something like that).  I created a variable called "SPATIALITE_SECURITY" and set the value to "relaxed".  On a mac, this is handled in the code successfully, although if you want to launch sqlite3 from terminal with the ability to use these functions, then you have to first run "export SPATIALITE_SECURITY=relaxed" before launching sqlite3.